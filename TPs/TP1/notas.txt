Notas

-> alinea 1-> duas palavras fundamentais, taxa de compressão e qualidade subjetiva -> Mul-TP1.xlsx (excel)

->alinea 4 -> padding -> matriz 32x32 e temos 70x90 -> o padding será o 32- 6(resto da divisao(70/32))=26

-> alinea 5 -> codificador RBG para YCbCr é pra usar a matriz dos slides, nao usar as formulas 
-> no descodificador de YCbCr para RBG utiliza-se a matriz inversa da primeira matriz , não a matriz que está nos slides
-> np.linalg.inv, funcao para inverter

encoder: passos iniciais -> downsampling -> DCT

decoder ->DCTi -> upsampling -> resto passos já feitos -> img reconstrida

usar np.round 256.8 -> 257 e ao passar para uint8 fica 1, logo temos de fazer clipping np.clip

->alinea 6-> downsampling -> tranformar 4 pixeis em um p.ex atraves de uma média das cores(RGB) 
-> Notaçao -> Y:Cr:Cb -> Y sempre 4, Cr 1, 2 ou 4 e Cb 0,1,2 ou 4 
-> 4:2:2, para cada 4 pixeis Y na horizontal vamos manter apenas 2 para o canal Cr ficando 2:4 na horizontal e o mesmo para Cb ficando Cr e Cb a metade 
-> 4:4:4 nao se fez nada , nao ha downsampling
-> 4:2:0-> situacao especial, é igual nos dois nos dois canais e significa que o downsampling é tanto na horizontal como na vertical-> 4pixeis transforman-se em 1 , metade na vertical e na horizontal
-> biblioteca cv2, funcao resize cv2.resize(img, none , fator escala horizontal, fator escala vertical, forma de interpolacao (linear, nearest, cubica))
-> se fizermos varios tipos de interpolacao e compararmos temos pontos extra

-> alinea 7 -> DCT -> DFT (transformada de fourier discreta)
-> freq alta -> maior variacao -> transiçoes fortes da cor da imagem
-> Vamos usar DCT (discrete cosine transforman), mesmo conceito que a DFT
-> é mais especifica logo a DCT é mais eficiente e é a que vamos usar por ter mais propriedades de compressão
-> no jpeg a DCT é aplicada em blocos 8x8 porque podemos garantir que há mais uniformidade e que contenha transiçoes suaves


-> alinea 8 -> Quantizaçao
-> Coeficiente DC no canto superior esquerdo, proporiconal à media , média x constante = DC
-> coeficientes AC no canto inferior direito
-> Imagem bastante suave logo nao tem energia nas altas frequencias
-> olho humano mais sensivel a baixas frequencias
-> menos bits para os coeficientes de alta frequencias
-> dividir pelas matrizes de Quantizaçao(slides)
-> no decoder fazemos a multiplicação obviamente
-> vamos notar que há diferencas em relacao à original
-> erros bastante grandes na imagem abrupta reconstruida
-> Fator de qualidade vai definir um fator de escala para as matrizes de Quantizaçao (formulas dos slides)
-> Atencao, fazer clipping se > 255, =255 , se <1 =1
-> padding -> dividir RGB -> YCbCr -> Downsampling -> DCT 8x8 -> Quantizaçao -> ...
-> decoder o inverso do que está acima -> imagem reconstruida
-> matriz de Quantizaçao entre 1 e 255
-> RGB entre 0 e 255
-> Quando aplicamos Quantizaçao têm de originar inteiros

-> alinea 9 -> Tratar coefiente DC (canto superior esquerdo)
-> 701 x matriz de Quantizaçao -> 44 
-> Vamos tentar reduzir a gama deste coeficientes (reduzir os bits necessarios)
-> Calcular a difencao entre blocos consequtivos do DC, Diferenciacao entre os coeficientes DC dos blocos e não dos pixeis dentro do bloco - codificacao diferencial ou DPCM
-> A codificacao dos coeficientes AC é feita em zig zag, passamos de bidimensional para unidimensional
-> padding -> dividir RGB -> YCbCr -> Downsampling -> DCT 8x8 -> Quantizaçao -> DPCM -> zig-zag -> RLE(apaga os zeros resultantes do zig zag) -> Huffman

-> alinea 10 -> metricas de distorçao e de erros
-> As de erro devem ser baixas e as de racio sinal-ruido altas
-> mean square error -> np.sum(Imagem original - reconstrida (subtracao direta) ** 2) / (num_linhas*num_colunas)
-> As imagens tem de ser convertidas andtes de se fazer o quadrado senao dá overflow do uint8 (converter para uint16 ou 32)
p tem de dar 90000